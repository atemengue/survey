[{"/home/atemengue/Documents/Web/survey/client/src/index.js":"1","/home/atemengue/Documents/Web/survey/client/src/reportWebVitals.js":"2","/home/atemengue/Documents/Web/survey/client/src/App.js":"3","/home/atemengue/Documents/Web/survey/client/src/components/Commune.js":"4","/home/atemengue/Documents/Web/survey/client/src/components/Acceuil.js":"5","/home/atemengue/Documents/Web/survey/client/src/components/Header.js":"6","/home/atemengue/Documents/Web/survey/client/src/components/ScrollToTop.js":"7","/home/atemengue/Documents/Web/survey/client/src/components/Formulaire.js":"8","/home/atemengue/Documents/Web/survey/client/src/components/Statistique.js":"9","/home/atemengue/Documents/Web/survey/client/src/components/Quiz.js":"10","/home/atemengue/Documents/Web/survey/client/src/components/QuizData.js":"11","/home/atemengue/Documents/Web/survey/client/src/components/Section.js":"12","/home/atemengue/Documents/Web/survey/client/src/db.js":"13"},{"size":753,"mtime":1611815369414,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1611538279297,"results":"16","hashOfConfig":"15"},{"size":1220,"mtime":1612624953199,"results":"17","hashOfConfig":"15"},{"size":1670,"mtime":1612628183850,"results":"18","hashOfConfig":"15"},{"size":409,"mtime":1611916989687,"results":"19","hashOfConfig":"15"},{"size":1655,"mtime":1611916989687,"results":"20","hashOfConfig":"15"},{"size":1990,"mtime":1611538279297,"results":"21","hashOfConfig":"15"},{"size":21611,"mtime":1612614997047,"results":"22","hashOfConfig":"15"},{"size":23481,"mtime":1612634917760,"results":"23","hashOfConfig":"15"},{"size":1956,"mtime":1611817240258,"results":"24","hashOfConfig":"15"},{"size":16722,"mtime":1611916989687,"results":"25","hashOfConfig":"15"},{"size":277,"mtime":1611538279297,"results":"26","hashOfConfig":"15"},{"size":19837,"mtime":1612634856464,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"8fwtjk",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"/home/atemengue/Documents/Web/survey/client/src/index.js",[],["59","60"],"/home/atemengue/Documents/Web/survey/client/src/reportWebVitals.js",[],"/home/atemengue/Documents/Web/survey/client/src/App.js",["61"],"/** @format */\nimport React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Acceuil from './components/Acceuil';\nimport Commune from './components/Commune';\nimport Formulaire from './components/Formulaire';\nimport Header from './components/Header';\nimport ScrollToTop from './components/ScrollToTop';\nimport Statistique from './components/Statistique';\nimport DB from './db';\n\nfunction App(pros) {\n  const [db, setDb] = useState(new DB('survey'));\n\n  useEffect(() => {\n    db.createIndexes();\n  });\n\n  return (\n    <div className='App'>\n      <Header />\n      <Switch>\n        <Route\n          path='/formulaires'\n          render={(props) => <Formulaire {...props} db={db} />}\n        />\n        <Route\n          path='/statistiques'\n          render={(props) => <Statistique {...props} db={db} />}\n        />\n\n        <Route\n          path='/communes'\n          render={(props) => <Commune {...props} db={db} />}\n        />\n        <Route path='/' component={Acceuil} />\n      </Switch>\n      <ToastContainer />\n      <ScrollToTop />\n    </div>\n  );\n}\n\nexport default App;\n","/home/atemengue/Documents/Web/survey/client/src/components/Commune.js",["62"],"/** @format */\n\nimport React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\n\nfunction Commune(props) {\n  const { db } = props;\n  const [communes, setCommunes] = useState([]);\n\n  const fetchCommunes = async () => {\n    const data = await db.getAllCommunes();\n    setCommunes(data);\n  };\n\n  const delete_structure = async (idCommune) => {\n    const response = await db.deleteCommune(idCommune);\n    if (!response.status === 400) {\n      toast.success('Commune supprime');\n      fetchCommunes();\n    } else {\n      toast.error('Erreur de supprimer');\n    }\n  };\n\n  useEffect(() => {\n    fetchCommunes();\n  }, []);\n\n  return (\n    <div className='container' style={{ marginTop: '100px' }}>\n      <h3>Listes des Communes</h3>\n      <table class='table table-striped'>\n        <thead>\n          <tr>\n            <th scope='col'>#</th>\n            <th scope='col'>Noms</th>\n            <th scope='col'>Document de vision strat√©gique de la commmune</th>\n            <th scope='col'>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {communes.map(({ doc, id }, index) => {\n            return (\n              <tr>\n                <th scope='row'>{++index}</th>\n                <td>{doc.nomStructure}</td>\n                <td>{doc.autreDocument}</td>\n                <td>\n                  <button\n                    onClick={() => delete_structure(id)}\n                    className='btn btn-danger'\n                  >\n                    Supprimer\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Commune;\n","/home/atemengue/Documents/Web/survey/client/src/components/Acceuil.js",[],"/home/atemengue/Documents/Web/survey/client/src/components/Header.js",[],"/home/atemengue/Documents/Web/survey/client/src/components/ScrollToTop.js",[],"/home/atemengue/Documents/Web/survey/client/src/components/Formulaire.js",[],"/home/atemengue/Documents/Web/survey/client/src/components/Statistique.js",["63","64","65","66","67"],"/** @format */\n\nimport React, { useEffect, useState } from 'react';\nimport {\n  degres,\n  quizSection2,\n  quizSection3,\n  quizSection4,\n  quizSection5,\n} from './QuizData';\n\nfunction Statistique({ db }) {\n  const [table1, setTable1] = useState({});\n  const [table2, setTable2] = useState({});\n  const [table3, setTable3] = useState({});\n  const [table4, setTable4] = useState({});\n  const [table6, setTable6] = useState(null);\n  const [table7, setTable7] = useState(null);\n  const [table8, setTable8] = useState(null);\n  const [table9, setTable9] = useState(null);\n  const [communes, setCommunes] = useState([]);\n\n  function sum(obj) {\n    var sum = 0;\n    for (var el in obj) {\n      if (obj.hasOwnProperty(el)) {\n        sum += parseFloat(obj[el]);\n      }\n    }\n    return sum;\n  }\n\n  const fetchTable = async (numero) => {\n    switch (numero) {\n      case 1:\n        const data = await db.table1();\n        setTable1(data);\n        break;\n      case 2:\n        const data2 = await db.table2();\n        console.log(data2);\n        setTable2(data2);\n        break;\n      case 3:\n        const data3 = await db.table3();\n        setTable3(data3);\n        break;\n      case 4:\n        const data4 = await db.table4();\n        setTable4(data4);\n        break;\n      case 5:\n        break;\n      case 6:\n        const data6 = await db.table6();\n        setTable6(data6);\n        break;\n      case 7:\n        const data7 = await db.table7();\n        setTable7(data7);\n        break;\n      case 8:\n        const data8 = await db.table8();\n        setTable8(data8);\n        break;\n      case 9:\n        const data9 = await db.table9();\n        setTable9(data9);\n        break;\n      default:\n        const communes = await db.getAllCommunes();\n        setCommunes(communes);\n        break;\n    }\n  };\n\n  useEffect(() => {\n    fetchTable();\n    if (communes.length > 0) {\n      fetchTable(1);\n      fetchTable(2);\n      fetchTable(3);\n      fetchTable(4);\n      fetchTable(6);\n      fetchTable(7);\n      fetchTable(8);\n      fetchTable(9);\n    }\n  }, [communes.length]);\n\n  return (\n    <>\n      <div className='container' style={{ marginTop: '100px' }}>\n        <div>\n          <h3>\n            Tableau 1: Situation des CTD selon qu'elles disposent ou non d'un\n            PCD\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>Situation</th>\n                <th scope='col'>Valeur Absolue</th>\n                <th scope='col'>Valeur Relative</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <th scope='row'>Communes disposant d'un PCD</th>\n                <td>{table1.with_pcd}</td>\n                <td>{table1.with_pcd}</td>\n              </tr>\n              <tr>\n                <th scope='row'>Commnes ne disposant d'un PCD</th>\n                <td>{table1.without_pcd}</td>\n                <td>{table1.without_pcd}</td>\n              </tr>\n              <tr>\n                <th scope='row'>Ensemble</th>\n                <td> {table1.with_pcd + table1.without_pcd}</td>\n                <td> {table1.with_pcd + table1.without_pcd}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div className='container'>\n        <div>\n          <h3>\n            Tableau2: R√©partition des CTD suivant les dimensions de performence\n            susceptibles d'affecter l'√©valuation de la performance\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>\n                  Dimenions pouvant affecter l'√©valuation des perofrmances\n                </th>\n                <th scope='col'>Valeur Absolue</th>\n                <th scope='col'>Valeur Relative</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <th scope='row'>Dimension usagers </th>\n                <td> {table2?.dimensionStrategiques?.dimensionUsagers}</td>\n                <td>{table2?.dimensionStrategiques?.dimensionUsagers}</td>\n              </tr>\n              <tr>\n                <th scope='row'>Dimension financi√®re </th>\n                <td>{table2?.dimensionStrategiques?.dimensionFinanciere}</td>\n                <td>{table2?.dimensionStrategiques?.dimensionFinanciere}</td>\n              </tr>\n              <tr>\n                <th scope='row'>Dimension humaine </th>\n                <td>{table2?.dimensionStrategiques?.dimensionHumaine}</td>\n                <td>{table2?.dimensionStrategiques?.dimensionHumaine}</td>\n              </tr>\n              <tr>\n                <th scope='row'>Dimension interne</th>\n                <td>{table2?.dimensionStrategiques?.dimensionInterne}</td>\n                <td>{table2?.dimensionStrategiques?.dimensionInterne}</td>\n              </tr>\n              <tr>\n                <th scope='row'>\n                  Dimension l√©gitimit√© de la commune aupr√®s des groupes externes\n                </th>\n                <td>{table2?.dimensionStrategiques?.dimensionLegitime}</td>\n                <td>{table2?.dimensionStrategiques?.dimensionLegitime}</td>\n              </tr>\n              <tr>\n                <th scope='row'>Dimension gouvernance locale</th>\n                <td>\n                  {table2?.dimensionStrategiques?.dimensionGouvernanceLocale}\n                </td>\n                <td>\n                  {table2?.dimensionStrategiques?.dimensionGouvernanceLocale}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>Autre (A pr√©ciser)</th>\n                <td>{table2?.dimensionStrategiques?.autre}</td>\n                <td>{table2?.dimensionStrategiques?.autre}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div className='container'>\n        <div>\n          <h3>\n            Tableau 3: R√©partition des CTD par dimension de performance\n            susceptibles d'affecter l'√©valuation de la performance suivant\n            qu'elle dispose d'un PCD\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>\n                  Dimenions pouvant affecter l'√©valuation des perofrmances\n                </th>\n                <th scope='col'>Existence d'un PCD</th>\n                <th scope='col'>Absence de PCD</th>\n                <th scope='col'>Ensemble</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <th scope='row'>Dimension usagers </th>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionUsagers}\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withoutPcd?.dimensionUsagers}\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionUsagers +\n                    table3?.dimensionStrategiques?.withoutPcd?.dimensionUsagers}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>Dimension financi√®re </th>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionFinanciere}\n                </td>\n                <td>\n                  {\n                    table3?.dimensionStrategiques?.withoutPcd\n                      ?.dimensionFinanciere\n                  }\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionFinanciere +\n                    table3?.dimensionStrategiques?.withoutPcd\n                      ?.dimensionFinanciere}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>Dimension humaine </th>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionHumaine}\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withoutPcd?.dimensionHumaine}\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionHumaine +\n                    table3?.dimensionStrategiques?.withoutPcd?.dimensionHumaine}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>Dimension interne</th>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionInterne}\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withoutPcd?.dimensionInterne}\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionInterne +\n                    table3?.dimensionStrategiques?.withoutPcd?.dimensionInterne}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>\n                  Dimension l√©gitimit√© de la commune aupr√®s des groupes externes\n                </th>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionLegitime}\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withoutPcd?.dimensionLegitime}\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.dimensionLegitime +\n                    table3?.dimensionStrategiques?.withoutPcd\n                      ?.dimensionLegitime}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>Dimension gouvernance locale</th>\n                <td>\n                  {\n                    table3?.dimensionStrategiques?.withPcd\n                      ?.dimensionGouvernanceLocale\n                  }\n                </td>\n                <td>\n                  {\n                    table3?.dimensionStrategiques?.withoutPcd\n                      ?.dimensionGouvernanceLocale\n                  }\n                </td>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd\n                    ?.dimensionGouvernanceLocale +\n                    table3?.dimensionStrategiques?.withoutPcd\n                      ?.dimensionGouvernanceLocale}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>Autre (A pr√©ciser)</th>\n                <td>{table3?.dimensionStrategiques?.withPcd?.autre}</td>\n                <td>{table3?.dimensionStrategiques?.withoutPcd?.autre}</td>\n                <td>\n                  {table3?.dimensionStrategiques?.withPcd?.autre +\n                    table3?.dimensionStrategiques?.withoutPcd?.autre}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>Ensemble</th>\n                <td>{sum(table3.dimensionStrategiques?.withPcd)}</td>\n                <td>{sum(table3.dimensionStrategiques?.withoutPcd)}</td>\n                <td>\n                  {sum(table3.dimensionStrategiques?.withPcd) +\n                    sum(table3.dimensionStrategiques?.withoutPcd)}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div className='container'>\n        <div>\n          <h3>\n            Tableau 4: R√©partition des CTD par outil de vision strat√©gique selon\n            l'existence ou non du PCD\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>Outil de Vision strat√©gique </th>\n                <th scope='col'>CTD disposant d'un PCD</th>\n                <th scope='col'>CTD ne disposant pas de PCD</th>\n                <th scope='col'>Ensemble</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <th scope='row'>PCD outil Vision strat√©gique </th>\n                <td>{table4.with_pcd_with_vision}</td>\n                <td>{table4.without_pcd_vision}</td>\n                <td>\n                  {table4.with_pcd_with_vision + table4.without_pcd_vision}\n                </td>\n              </tr>\n              <tr>\n                <th scope='row'>Autres outils de visions strat√©giques </th>\n                <td></td>\n                <td></td>\n                <td></td>\n              </tr>\n              <tr>\n                <th scope='row'>Ensemble</th>\n                <td></td>\n                <td></td>\n                <td></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div className='container'>\n        <div>\n          <h3>\n            Tableau 5: R√©partition des CTD par outil de vision strat√©gique selon\n            les dimensions pouvant affecter la performance\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>Outil de Vision strat√©gique </th>\n                {quizSection2.map((question, index) => {\n                  return (\n                    <th key={index} scope='col'>\n                      {question.title}\n                    </th>\n                  );\n                })}\n                <th scope='col'>Ensemble</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <th scope='row'>Autres outils de visions strat√©giques</th>\n                {quizSection2.map((question, index) => {\n                  return <td></td>;\n                })}\n                <td></td>\n              </tr>\n\n              <tr>\n                <th scope='row'>Ensemble</th>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div className='container'>\n        <div>\n          <h3>\n            Tableau 6: R√©partition des CTD par dimension de performance suivant\n            leur(dimensions) d√©gr√© d'importance\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>\n                  Dimenions pouvant affecter l'√©valuation des perofrmances{' '}\n                </th>\n                {degres.map((degre, index) => {\n                  return (\n                    <th key={index} scope='col'>\n                      {degre.title}\n                    </th>\n                  );\n                })}\n                <th scope='col'>Ensemble</th>\n              </tr>\n            </thead>\n            <tbody>\n              {quizSection2.map((question, index) => {\n                let somme = 0;\n                return (\n                  <tr>\n                    <th scope='row'>{question.title}</th>\n\n                    {degres.map((degre, index) => {\n                      if (table6) {\n                        somme +=\n                          table6[question.parent][question.name][degre.name];\n                      }\n                      return (\n                        <td key={index}>\n                          {table6\n                            ? table6[question.parent][question.name][degre.name]\n                            : ''}\n                        </td>\n                      );\n                    })}\n                    <td>{somme}</td>\n                  </tr>\n                );\n              })}\n              <tr>\n                <th scope='row'>Ensemble</th>\n                {degres.map((degre, index) => {\n                  if (table6) {\n                    return (\n                      <td key={index}>\n                        {table6['dimensionStrategique']['ensemble'][degre.name]}\n                      </td>\n                    );\n                  }\n                })}\n                <td>\n                  {table6\n                    ? sum(table6['dimensionStrategique']['ensemble'])\n                    : ''}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div className='container'>\n        <div>\n          <h3>\n            Tableau 7: R√©partition des CTD par facteurs cl√©s de succ√®s selon\n            leur perception de l'importance desdits facteurs dans l'atteinte de\n            la performance de la CTD\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>Facteurs cl√©s de succ√®s </th>\n                {degres.map((degre, index) => {\n                  return (\n                    <th key={index} scope='col'>\n                      {degre.title}\n                    </th>\n                  );\n                })}\n                <th scope='col'>Ensemble</th>\n              </tr>\n            </thead>\n            <tbody>\n              {quizSection3.map((question, index) => {\n                let somme = 0;\n                return (\n                  <tr>\n                    <th scope='row'>{question.title}</th>\n\n                    {degres.map((degre, index) => {\n                      if (table7) {\n                        somme +=\n                          table7[question.parent][question.name][degre.name];\n                      }\n                      return (\n                        <td key={index}>\n                          {table7\n                            ? table7[question.parent][question.name][degre.name]\n                            : ''}\n                        </td>\n                      );\n                    })}\n\n                    <td>{somme}</td>\n                  </tr>\n                );\n              })}\n              <tr>\n                <th scope='row'>Ensemble</th>\n                {degres.map((degre, index) => {\n                  if (table7) {\n                    return (\n                      <td key={index}>\n                        {\n                          table7['facteurSuccessIndicateurPerformance'][\n                            'ensemble'\n                          ][degre.name]\n                        }\n                      </td>\n                    );\n                  }\n                })}\n                <td>\n                  {table7\n                    ? sum(\n                        table7['facteurSuccessIndicateurPerformance'][\n                          'ensemble'\n                        ]\n                      )\n                    : ''}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div className='container'>\n        <div>\n          <h3>\n            Tableau 8: R√©partition des CTD par Indicateur de performance selon\n            leur perception de l'importance desits indicateurs\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>Indicateur de performance </th>\n                {degres.map((degre, index) => {\n                  return (\n                    <th key={index} scope='col'>\n                      {degre.title}\n                    </th>\n                  );\n                })}\n                <th scope='col'>Ensemble</th>\n              </tr>\n            </thead>\n            <tbody>\n              {quizSection4.map((question, index) => {\n                let somme = 0;\n                return (\n                  <tr>\n                    <th scope='row'>{question.title}</th>\n\n                    {degres.map((degre, index) => {\n                      if (table8) {\n                        somme +=\n                          table8[question.parent][question.name][degre.name];\n                      }\n                      return (\n                        <td key={index}>\n                          {table8\n                            ? table8[question.parent][question.name][degre.name]\n                            : ''}\n                        </td>\n                      );\n                    })}\n\n                    <td>{somme}</td>\n                  </tr>\n                );\n              })}\n              <tr>\n                <th scope='row'>Ensemble</th>\n                {degres.map((degre, index) => {\n                  if (table8) {\n                    return (\n                      <td key={index}>\n                        {\n                          table8['indicateursDePerformanceDegreImportance'][\n                            'ensemble'\n                          ][degre.name]\n                        }\n                      </td>\n                    );\n                  }\n                })}\n                <td>\n                  {table8\n                    ? sum(\n                        table8['indicateursDePerformanceDegreImportance'][\n                          'ensemble'\n                        ]\n                      )\n                    : ''}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <hr />\n      <div className='container'>\n        <div>\n          <h3>\n            Tableau 9: R√©partition des CTD par Indicateur de performance selon\n            leur perception du niveau de communication desits indicateurs pour\n            la prise des d√©cisions\n          </h3>\n          <table className='table table-bordered'>\n            <thead>\n              <tr>\n                <th scope='col'>Indicateur de performance </th>\n                {degres.map((degre, index) => {\n                  return (\n                    <th key={index} scope='col'>\n                      {degre.title}\n                    </th>\n                  );\n                })}\n                <th scope='col'>Ensemble</th>\n              </tr>\n            </thead>\n            <tbody>\n              {quizSection5.map((question, index) => {\n                let somme = 0;\n                return (\n                  <tr>\n                    <th scope='row'>{question.title}</th>\n\n                    {degres.map((degre, index) => {\n                      if (table9) {\n                        somme +=\n                          table9[question.parent][question.name][degre.name];\n                      }\n                      return (\n                        <td key={index}>\n                          {table9\n                            ? table9[question.parent][question.name][degre.name]\n                            : ''}\n                        </td>\n                      );\n                    })}\n\n                    <td>{somme}</td>\n                  </tr>\n                );\n              })}\n              <tr>\n                <th scope='row'>Ensemble</th>\n                {degres.map((degre, index) => {\n                  if (table9) {\n                    return (\n                      <td key={index}>\n                        {\n                          table9['indicateursDePerformancePriseDecision'][\n                            'ensemble'\n                          ][degre.name]\n                        }\n                      </td>\n                    );\n                  }\n                })}\n                <td>\n                  {table9\n                    ? sum(\n                        table9['indicateursDePerformancePriseDecision'][\n                          'ensemble'\n                        ]\n                      )\n                    : ''}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Statistique;\n","/home/atemengue/Documents/Web/survey/client/src/components/Quiz.js",[],"/home/atemengue/Documents/Web/survey/client/src/components/QuizData.js",[],"/home/atemengue/Documents/Web/survey/client/src/components/Section.js",[],"/home/atemengue/Documents/Web/survey/client/src/db.js",["68","69","70","71","72","73","74","75","76","77","78","79"],"/** @format */\n\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\n\nPouchDB.plugin(PouchDBFind);\nclass DB {\n  constructor(name) {\n    this.db = new PouchDB(name);\n  }\n\n  async create_commune(data) {\n    try {\n      let commune = await this.db.post(data);\n      return commune;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async getAllCommunes() {\n    try {\n      let communes = await this.db.allDocs({\n        include_docs: true,\n      });\n\n      // communes.filter((commune) => commune.idStructure === data.id)\n\n      return communes.rows.splice(0, communes.total_rows - 3);\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async deleteCommune(id) {\n    try {\n      let doc = await this.db.get(id);\n      let res = await this.db.remove(doc);\n      return res;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  createIndexes() {\n    this.db\n      .createIndex({\n        index: {\n          fields: ['pcdExist', 'visionStrategique'],\n        },\n      })\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n\n    this.db\n      .createIndex({\n        index: {\n          fields: ['pcdExist'],\n        },\n      })\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n\n    this.db\n      .createIndex({\n        index: {\n          fields: ['visionStrategique'],\n        },\n      })\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n  }\n\n  async table1() {\n    try {\n      const with_pcd = await this.db.find({\n        selector: {\n          pcdExist: true,\n        },\n      });\n      const without_pcd = await this.db.find({\n        selector: {\n          pcdExist: false,\n        },\n      });\n\n      if (with_pcd && without_pcd) {\n        return {\n          with_pcd: with_pcd.docs.length,\n          without_pcd: without_pcd.docs.length,\n        };\n      } else {\n        return {\n          error: 'Error',\n        };\n      }\n    } catch (error) {\n      throw Error(error);\n    }\n  }\n\n  async table2() {\n    try {\n      let response = await this.db.allDocs({\n        include_docs: true,\n      });\n\n      // communes.filter((commune) => commune.idStructure === data.id)\n\n      let communes = response.rows.splice(0, response.total_rows - 3);\n\n      const dimensionStrategiques = {};\n      if (communes) {\n        const keys = Object.keys(communes[0].doc.dimensionStrategique);\n        for (const key of keys) {\n          dimensionStrategiques[key] = 0;\n        }\n        communes.map((commune) => {\n          keys.map((valueKey) => {\n            if (commune.doc.dimensionStrategique[valueKey].status) {\n              dimensionStrategiques[valueKey] =\n                (dimensionStrategiques[valueKey] || 0) + 1;\n            }\n          });\n        });\n      }\n      return { dimensionStrategiques };\n    } catch (error) {\n      throw Error(error);\n    }\n  }\n\n  async table3() {\n    try {\n      let response = await this.db.allDocs({\n        include_docs: true,\n      });\n\n      // communes.filter((commune) => commune.idStructure === data.id)\n\n      let communes = response.rows.splice(0, response.total_rows - 3);\n\n      const dimensionStrategiques = {\n        withPcd: {},\n        withoutPcd: {},\n      };\n\n      if (communes) {\n        const keys = Object.keys(communes[0].doc.dimensionStrategique);\n        for (const key of keys) {\n          dimensionStrategiques.withPcd[key] = 0;\n          dimensionStrategiques.withoutPcd[key] = 0;\n        }\n        communes.map((commune) => {\n          keys.map((valueKey) => {\n            if (commune.doc.pcdExist) {\n              if (commune.doc.dimensionStrategique[valueKey].status) {\n                dimensionStrategiques.withPcd[valueKey] =\n                  (dimensionStrategiques.withPcd[valueKey] || 0) + 1;\n              }\n            } else {\n              if (commune.doc.dimensionStrategique[valueKey].status) {\n                dimensionStrategiques.withoutPcd[valueKey] =\n                  (dimensionStrategiques.withoutPcd[valueKey] || 0) + 1;\n              }\n            }\n          });\n        });\n      }\n      return { dimensionStrategiques };\n    } catch (error) {\n      throw Error(error);\n    }\n  }\n\n  async table4() {\n    try {\n      const with_pcd_with_vision = await this.db.find({\n        selector: {\n          pcdExist: true,\n          visionStrategique: true,\n        },\n      });\n\n      const without_pcd_vision = await await this.db.find({\n        selector: {\n          pcdExist: false,\n          visionStrategique: true,\n        },\n      });\n\n      if (with_pcd_with_vision && without_pcd_vision) {\n        return {\n          with_pcd_with_vision: with_pcd_with_vision.docs.length,\n          without_pcd_vision: without_pcd_vision.docs.length,\n        };\n      } else {\n        return {\n          error: 'Error',\n        };\n      }\n    } catch (error) {\n      throw Error(error);\n    }\n  }\n\n  async table6() {\n    try {\n      let response = await this.db.allDocs({\n        include_docs: true,\n      });\n\n      let communes = response.rows.splice(0, response.total_rows - 3);\n\n      const degres = ['peu', 'moins', 'neutre', 'important', 'assez', 'tres'];\n\n      const dimensionStrategique = {};\n\n      if (communes) {\n        const keys = Object.keys(communes[0].doc.dimensionStrategique);\n        for (const key of keys) {\n          dimensionStrategique[key] = {};\n          for (let degre of degres) {\n            dimensionStrategique[key][degre] = 0;\n          }\n        }\n\n        dimensionStrategique['ensemble'] = {\n          peu: 0,\n          moins: 0,\n          neutre: 0,\n          important: 0,\n          assez: 0,\n          tres: 0,\n        };\n\n        communes.map((commune) => {\n          keys.map((valueKey) => {\n            switch (\n              parseInt(commune.doc.dimensionStrategique[valueKey].degre)\n            ) {\n              case 1:\n                dimensionStrategique[valueKey][degres[0]] =\n                  (dimensionStrategique[valueKey][degres[0]] || 0) + 1;\n\n                dimensionStrategique['ensemble']['peu'] =\n                  (dimensionStrategique['ensemble']['peu'] || 0) + 1;\n                break;\n\n              case 2:\n                dimensionStrategique[valueKey][degres[1]] =\n                  (dimensionStrategique[valueKey][degres[1]] || 0) + 1;\n                dimensionStrategique['ensemble']['moins'] =\n                  (dimensionStrategique['ensemble']['moins'] || 0) + 1;\n                break;\n\n              case 3:\n                dimensionStrategique[valueKey][degres[2]] =\n                  (dimensionStrategique[valueKey][degres[2]] || 0) + 1;\n                dimensionStrategique['ensemble']['neutre'] =\n                  (dimensionStrategique['ensemble']['neutre'] || 0) + 1;\n                break;\n              case 4:\n                dimensionStrategique[valueKey][degres[3]] =\n                  (dimensionStrategique[valueKey][degres[3]] || 0) + 1;\n                dimensionStrategique['ensemble']['important'] =\n                  (dimensionStrategique['ensemble']['important'] || 0) + 1;\n                break;\n              case 5:\n                dimensionStrategique[valueKey][degres[4]] =\n                  (dimensionStrategique[valueKey][degres[4]] || 0) + 1;\n                dimensionStrategique['ensemble']['assez'] =\n                  (dimensionStrategique['ensemble']['assez'] || 0) + 1;\n                break;\n              case 6:\n                dimensionStrategique[valueKey][degres[5]] =\n                  (dimensionStrategique[valueKey][degres[5]] || 0) + 1;\n                dimensionStrategique['ensemble']['tres'] =\n                  (dimensionStrategique['ensemble']['tres'] || 0) + 1;\n                break;\n\n              default:\n                break;\n            }\n          });\n        });\n      }\n      return { dimensionStrategique };\n    } catch (error) {\n      throw Error(error);\n    }\n  }\n\n  async table7() {\n    try {\n      let response = await this.db.allDocs({\n        include_docs: true,\n      });\n\n      let communes = response.rows.splice(0, response.total_rows - 3);\n\n      const degres = ['peu', 'moins', 'neutre', 'important', 'assez', 'tres'];\n\n      const facteurSuccessIndicateurPerformance = {};\n      if (communes) {\n        const keys = Object.keys(\n          communes[0].doc.facteurSuccessIndicateurPerformance\n        );\n        for (const key of keys) {\n          facteurSuccessIndicateurPerformance[key] = {};\n          for (let degre of degres) {\n            facteurSuccessIndicateurPerformance[key][degre] = 0;\n          }\n        }\n\n        facteurSuccessIndicateurPerformance['ensemble'] = {\n          peu: 0,\n          moins: 0,\n          neutre: 0,\n          important: 0,\n          assez: 0,\n          tres: 0,\n        };\n\n        communes.map((commune) => {\n          keys.map((valueKey) => {\n            switch (\n              parseInt(\n                commune.doc.facteurSuccessIndicateurPerformance[valueKey]\n              )\n            ) {\n              case 1:\n                facteurSuccessIndicateurPerformance[valueKey][degres[0]] =\n                  (facteurSuccessIndicateurPerformance[valueKey][degres[0]] ||\n                    0) + 1;\n\n                facteurSuccessIndicateurPerformance['ensemble']['peu'] =\n                  (facteurSuccessIndicateurPerformance['ensemble']['peu'] ||\n                    0) + 1;\n                break;\n              case 2:\n                facteurSuccessIndicateurPerformance[valueKey][degres[1]] =\n                  (facteurSuccessIndicateurPerformance[valueKey][degres[1]] ||\n                    0) + 1;\n                facteurSuccessIndicateurPerformance['ensemble']['moins'] =\n                  (facteurSuccessIndicateurPerformance['ensemble']['moins'] ||\n                    0) + 1;\n                break;\n              case 3:\n                facteurSuccessIndicateurPerformance[valueKey][degres[2]] =\n                  (facteurSuccessIndicateurPerformance[valueKey][degres[2]] ||\n                    0) + 1;\n\n                facteurSuccessIndicateurPerformance['ensemble']['neutre'] =\n                  (facteurSuccessIndicateurPerformance['ensemble']['neutre'] ||\n                    0) + 1;\n                break;\n              case 4:\n                facteurSuccessIndicateurPerformance[valueKey][degres[3]] =\n                  (facteurSuccessIndicateurPerformance[valueKey][degres[3]] ||\n                    0) + 1;\n                facteurSuccessIndicateurPerformance['ensemble']['important'] =\n                  (facteurSuccessIndicateurPerformance['ensemble'][\n                    'important'\n                  ] || 0) + 1;\n                break;\n              case 5:\n                facteurSuccessIndicateurPerformance[valueKey][degres[4]] =\n                  (facteurSuccessIndicateurPerformance[valueKey][degres[4]] ||\n                    0) + 1;\n                facteurSuccessIndicateurPerformance['ensemble']['assez'] =\n                  (facteurSuccessIndicateurPerformance['ensemble']['assez'] ||\n                    0) + 1;\n                break;\n              case 6:\n                facteurSuccessIndicateurPerformance[valueKey][degres[5]] =\n                  (facteurSuccessIndicateurPerformance[valueKey][degres[5]] ||\n                    0) + 1;\n\n                facteurSuccessIndicateurPerformance['ensemble']['tres'] =\n                  (facteurSuccessIndicateurPerformance['ensemble']['tres'] ||\n                    0) + 1;\n                break;\n\n              default:\n                break;\n            }\n          });\n        });\n      }\n      return { facteurSuccessIndicateurPerformance };\n    } catch (error) {\n      throw Error(error);\n    }\n  }\n\n  async table8() {\n    try {\n      let response = await this.db.allDocs({\n        include_docs: true,\n      });\n\n      let communes = response.rows.splice(0, response.total_rows - 3);\n\n      const degres = ['peu', 'moins', 'neutre', 'important', 'assez', 'tres'];\n\n      const indicateursDePerformanceDegreImportance = {};\n      if (communes) {\n        const keys = Object.keys(\n          communes[0].doc.indicateursDePerformanceDegreImportance\n        );\n        for (const key of keys) {\n          indicateursDePerformanceDegreImportance[key] = {};\n          for (let degre of degres) {\n            indicateursDePerformanceDegreImportance[key][degre] = 0;\n          }\n        }\n\n        indicateursDePerformanceDegreImportance['ensemble'] = {\n          peu: 0,\n          moins: 0,\n          neutre: 0,\n          important: 0,\n          assez: 0,\n          tres: 0,\n        };\n\n        communes.map((commune) => {\n          keys.map((valueKey) => {\n            switch (\n              parseInt(\n                commune.doc.indicateursDePerformanceDegreImportance[valueKey]\n              )\n            ) {\n              case 1:\n                indicateursDePerformanceDegreImportance[valueKey][degres[0]] =\n                  (indicateursDePerformanceDegreImportance[valueKey][\n                    degres[0]\n                  ] || 0) + 1;\n\n                indicateursDePerformanceDegreImportance['ensemble']['peu'] =\n                  (indicateursDePerformanceDegreImportance['ensemble']['peu'] ||\n                    0) + 1;\n\n                break;\n\n              case 2:\n                indicateursDePerformanceDegreImportance[valueKey][degres[1]] =\n                  (indicateursDePerformanceDegreImportance[valueKey][\n                    degres[1]\n                  ] || 0) + 1;\n\n                indicateursDePerformanceDegreImportance['ensemble']['moins'] =\n                  (indicateursDePerformanceDegreImportance['ensemble'][\n                    'moins'\n                  ] || 0) + 1;\n                break;\n\n              case 3:\n                indicateursDePerformanceDegreImportance[valueKey][degres[2]] =\n                  (indicateursDePerformanceDegreImportance[valueKey][\n                    degres[2]\n                  ] || 0) + 1;\n\n                indicateursDePerformanceDegreImportance['ensemble']['neutre'] =\n                  (indicateursDePerformanceDegreImportance['ensemble'][\n                    'neutre'\n                  ] || 0) + 1;\n                break;\n              case 4:\n                indicateursDePerformanceDegreImportance[valueKey][degres[3]] =\n                  (indicateursDePerformanceDegreImportance[valueKey][\n                    degres[3]\n                  ] || 0) + 1;\n\n                indicateursDePerformanceDegreImportance['ensemble'][\n                  'important'\n                ] =\n                  (indicateursDePerformanceDegreImportance['ensemble'][\n                    'important'\n                  ] || 0) + 1;\n                break;\n              case 5:\n                indicateursDePerformanceDegreImportance[valueKey][degres[4]] =\n                  (indicateursDePerformanceDegreImportance[valueKey][\n                    degres[4]\n                  ] || 0) + 1;\n\n                indicateursDePerformanceDegreImportance['ensemble']['assez'] =\n                  (indicateursDePerformanceDegreImportance['ensemble'][\n                    'assez'\n                  ] || 0) + 1;\n                break;\n              case 6:\n                indicateursDePerformanceDegreImportance[valueKey][degres[5]] =\n                  (indicateursDePerformanceDegreImportance[valueKey][\n                    degres[5]\n                  ] || 0) + 1;\n\n                indicateursDePerformanceDegreImportance['ensemble']['tres'] =\n                  (indicateursDePerformanceDegreImportance['ensemble'][\n                    'tres'\n                  ] || 0) + 1;\n                break;\n\n              default:\n                break;\n            }\n          });\n        });\n      }\n      return { indicateursDePerformanceDegreImportance };\n    } catch (error) {\n      throw Error(error);\n    }\n  }\n\n  async table9() {\n    try {\n      let response = await this.db.allDocs({\n        include_docs: true,\n      });\n\n      let communes = response.rows.splice(0, response.total_rows - 3);\n\n      const degres = ['peu', 'moins', 'neutre', 'important', 'assez', 'tres'];\n\n      const indicateursDePerformancePriseDecision = {};\n      if (communes) {\n        const keys = Object.keys(\n          communes[0].doc.indicateursDePerformancePriseDecision\n        );\n        for (const key of keys) {\n          indicateursDePerformancePriseDecision[key] = {};\n          for (let degre of degres) {\n            indicateursDePerformancePriseDecision[key][degre] = 0;\n          }\n        }\n\n        indicateursDePerformancePriseDecision['ensemble'] = {\n          peu: 0,\n          moins: 0,\n          neutre: 0,\n          important: 0,\n          assez: 0,\n          tres: 0,\n        };\n\n        communes.map((commune) => {\n          keys.map((valueKey) => {\n            switch (\n              parseInt(\n                commune.doc.indicateursDePerformancePriseDecision[valueKey]\n              )\n            ) {\n              case 1:\n                indicateursDePerformancePriseDecision[valueKey][degres[0]] =\n                  (indicateursDePerformancePriseDecision[valueKey][degres[0]] ||\n                    0) + 1;\n\n                indicateursDePerformancePriseDecision['ensemble']['peu'] =\n                  (indicateursDePerformancePriseDecision['ensemble']['peu'] ||\n                    0) + 1;\n                break;\n\n              case 2:\n                indicateursDePerformancePriseDecision[valueKey][degres[1]] =\n                  (indicateursDePerformancePriseDecision[valueKey][degres[1]] ||\n                    0) + 1;\n\n                indicateursDePerformancePriseDecision['ensemble']['moins'] =\n                  (indicateursDePerformancePriseDecision['ensemble']['moins'] ||\n                    0) + 1;\n                break;\n\n              case 3:\n                indicateursDePerformancePriseDecision[valueKey][degres[2]] =\n                  (indicateursDePerformancePriseDecision[valueKey][degres[2]] ||\n                    0) + 1;\n\n                indicateursDePerformancePriseDecision['ensemble']['neutre'] =\n                  (indicateursDePerformancePriseDecision['ensemble'][\n                    'neutre'\n                  ] || 0) + 1;\n                break;\n              case 4:\n                indicateursDePerformancePriseDecision[valueKey][degres[3]] =\n                  (indicateursDePerformancePriseDecision[valueKey][degres[3]] ||\n                    0) + 1;\n\n                indicateursDePerformancePriseDecision['ensemble']['important'] =\n                  (indicateursDePerformancePriseDecision['ensemble'][\n                    'important'\n                  ] || 0) + 1;\n                break;\n              case 5:\n                indicateursDePerformancePriseDecision[valueKey][degres[4]] =\n                  (indicateursDePerformancePriseDecision[valueKey][degres[4]] ||\n                    0) + 1;\n                indicateursDePerformancePriseDecision['ensemble']['assez'] =\n                  (indicateursDePerformancePriseDecision['ensemble']['assez'] ||\n                    0) + 1;\n                break;\n              case 6:\n                indicateursDePerformancePriseDecision[valueKey][degres[5]] =\n                  (indicateursDePerformancePriseDecision[valueKey][degres[5]] ||\n                    0) + 1;\n                indicateursDePerformancePriseDecision['ensemble']['tres'] =\n                  (indicateursDePerformancePriseDecision['ensemble']['tres'] ||\n                    0) + 1;\n                break;\n\n              default:\n                break;\n            }\n          });\n        });\n      }\n      return { indicateursDePerformancePriseDecision };\n    } catch (error) {\n      throw Error(error);\n    }\n  }\n}\n\nexport default DB;\n",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":15,"column":14,"nodeType":"86","messageId":"87","endLine":15,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":27,"column":6,"nodeType":"90","endLine":27,"endColumn":8,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":89,"column":6,"nodeType":"90","endLine":89,"endColumn":23,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":460,"column":44,"nodeType":"96","messageId":"97","endLine":460,"endColumn":46},{"ruleId":"94","severity":1,"message":"95","line":528,"column":44,"nodeType":"96","messageId":"97","endLine":528,"endColumn":46},{"ruleId":"94","severity":1,"message":"95","line":603,"column":44,"nodeType":"96","messageId":"97","endLine":603,"endColumn":46},{"ruleId":"94","severity":1,"message":"95","line":679,"column":44,"nodeType":"96","messageId":"97","endLine":679,"endColumn":46},{"ruleId":"94","severity":1,"message":"98","line":130,"column":32,"nodeType":"96","messageId":"99","endLine":130,"endColumn":34},{"ruleId":"94","severity":1,"message":"98","line":131,"column":31,"nodeType":"96","messageId":"99","endLine":131,"endColumn":33},{"ruleId":"94","severity":1,"message":"98","line":166,"column":32,"nodeType":"96","messageId":"99","endLine":166,"endColumn":34},{"ruleId":"94","severity":1,"message":"98","line":167,"column":31,"nodeType":"96","messageId":"99","endLine":167,"endColumn":33},{"ruleId":"94","severity":1,"message":"98","line":249,"column":32,"nodeType":"96","messageId":"99","endLine":249,"endColumn":34},{"ruleId":"94","severity":1,"message":"98","line":250,"column":31,"nodeType":"96","messageId":"99","endLine":250,"endColumn":33},{"ruleId":"94","severity":1,"message":"98","line":337,"column":32,"nodeType":"96","messageId":"99","endLine":337,"endColumn":34},{"ruleId":"94","severity":1,"message":"98","line":338,"column":31,"nodeType":"96","messageId":"99","endLine":338,"endColumn":33},{"ruleId":"94","severity":1,"message":"98","line":440,"column":32,"nodeType":"96","messageId":"99","endLine":440,"endColumn":34},{"ruleId":"94","severity":1,"message":"98","line":441,"column":31,"nodeType":"96","messageId":"99","endLine":441,"endColumn":33},{"ruleId":"94","severity":1,"message":"98","line":561,"column":32,"nodeType":"96","messageId":"99","endLine":561,"endColumn":34},{"ruleId":"94","severity":1,"message":"98","line":562,"column":31,"nodeType":"96","messageId":"99","endLine":562,"endColumn":33},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'setDb' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCommunes'. Either include it or remove the dependency array.","ArrayExpression",["102"],"React Hook useEffect has a missing dependency: 'fetchTable'. Either include it or remove the dependency array.",["103"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [fetchCommunes]",{"range":"108","text":"109"},"Update the dependencies array to be: [communes.length, fetchTable]",{"range":"110","text":"111"},[638,640],"[fetchCommunes]",[2044,2061],"[communes.length, fetchTable]"]